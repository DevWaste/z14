import os
import random
import json

class Shop:
    def __init__(self):
        self.upgrades = {
            'health': {'name': '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–π', 'cost': 10},
            'capacity': {'name': '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–æ–¥—ã', 'cost': 10}
        }

    def display_upgrades(self):
        print("–ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π:")
        for i, (key, value) in enumerate(self.upgrades.items(), 1):
            print(f"{i}. {value['name']} - –°—Ç–æ–∏–º–æ—Å—Ç—å: {value['cost']} –æ—á–∫–æ–≤")

class Helicopter:
    def __init__(self, x, y, map_width, map_height, water_capacity, max_lives, points):
        self.x = x
        self.y = y
        self.map_width = map_width
        self.map_height = map_height
        self.water_capacity = water_capacity
        self.current_water = 0
        self.max_lives = max_lives
        self.lives = max_lives
        self.points = points
        self.turns_since_last_fire = 0  # –°—á–µ—Ç—á–∏–∫ —Ö–æ–¥–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∂–∞—Ä–∞

    def move(self, direction):
        self.turns_since_last_fire += 1
        if direction == 'w':
            self.y = max(0, self.y - 1)
        elif direction == 's':
            self.y = min(self.map_height - 1, self.y + 1)
        elif direction == 'a':
            self.x = max(0, self.x - 1)
        elif direction == 'd':
            self.x = min(self.map_width - 1, self.x + 1)

    def fill_water(self):
            self.current_water = self.water_capacity
            print(f"–í–µ—Ä—Ç–æ–ª–µ—Ç –Ω–∞–ø–æ–ª–Ω–∏–ª—Å—è –≤–æ–¥–æ–π. –¢–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å –≤–æ–¥—ã: {self.current_water}/{self.water_capacity}")

    def lose_life(self):
        self.lives -= 1
        print(f"–í–µ—Ä—Ç–æ–ª–µ—Ç –ø–æ—Ç–µ—Ä—è–ª –∂–∏–∑–Ω—å. –û—Å—Ç–∞–ª–æ—Å—å –∂–∏–∑–Ω–µ–π: {self.lives}/{self.max_lives}")

    def restore_lives(self):
        self.lives = self.max_lives
        print(f"–ñ–∏–∑–Ω–∏ –≤–µ—Ä—Ç–æ–ª–µ—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è: {self.max_lives}/{self.max_lives}")

    def random_teleport(self):
        directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]
        dx, dy = random.choice(directions)
        new_x = max(0, min(self.map_width - 1, self.x + dx))
        new_y = max(0, min(self.map_height - 1, self.y + dy))
        self.x = new_x
        self.y = new_y

    def buy_upgrade(self, upgrade, shop):
        if upgrade.isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–π
            upgrade_index = int(upgrade) - 1  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é —Ü–∏—Ñ—Ä—É –≤ –∏–Ω–¥–µ–∫—Å —Å–ø–∏—Å–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π
            if 0 <= upgrade_index < len(shop.upgrades):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
                upgrade_key = list(shop.upgrades.keys())[upgrade_index]  # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —É–ª—É—á—à–µ–Ω–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å—É
                upgrade_info = shop.upgrades[upgrade_key]
                if self.points >= upgrade_info['cost']:
                    if upgrade_key == 'health':
                        self.max_lives += 1
                        print("–í—ã —É–ª—É—á—à–∏–ª–∏ –∂–∏–∑–Ω–∏ –≤–µ—Ä—Ç–æ–ª–µ—Ç–∞.")
                    elif upgrade_key == 'capacity':
                        self.water_capacity += 1
                        print("–í—ã —É–≤–µ–ª–∏—á–∏–ª–∏ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–µ—Ä—Ç–æ–ª–µ—Ç–∞ –¥–ª—è –≤–æ–¥—ã.")
                    self.points -= upgrade_info['cost']
                else:
                    print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è.")
            else:
                print("–£–ª—É—á—à–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —É–ª—É—á—à–µ–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É–ª—É—á—à–µ–Ω–∏—è.")

    def extinguish_fire(self, game_map):
        if game_map.board[self.y][self.x] == 'üî•':
            if self.current_water > 0:
                game_map.board[self.y][self.x] = 'üå≤'
                self.points += 10
                game_map.fire_counter -= 1
                self.current_water -= 1
                self.turns_since_last_fire = 0
                print("–ü–æ–∂–∞—Ä –ø–æ—Ç—É—à–µ–Ω.")
            else:
                print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã –¥–ª—è —Ç—É—à–µ–Ω–∏—è –ø–æ–∂–∞—Ä–∞.")

class Map:
    def __init__(self, width, height, num_trees, num_rivers):
        self.width = width
        self.height = height
        self.board = [['üü©' for _ in range(self.width)] for _ in range(self.height)]
        self.fire_counter = 0
        self.burn_timers = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ä–µ–Ω–∏—è –¥–µ—Ä–µ–≤—å–µ–≤
        self.helicopter = Helicopter(self.width // 2, self.height // 2, self.width, self.height, water_capacity=1, max_lives=3, points=0)
        self.shop = Shop()
        self.turns = 0  # –°—á–µ—Ç—á–∏–∫ —Ö–æ–¥–æ–≤
        self.generate_trees(num_trees)
        self.generate_rivers(num_rivers)
        self.generate_storm()
        self.generate_clouds()
        self.generate_shop()
        self.generate_hospitals()

    def generate_fires(self, num_fires):
        for _ in range(num_fires):
            while True:
                x = random.randint(0, self.width - 1)
                y = random.randint(0, self.height - 1)
                if self.board[y][x] == 'üå≤':
                    self.board[y][x] = 'üî•'
                    self.burn_timers[(y, x)] = 0  # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç –≥–æ—Ä–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–∂–∞—Ä–∞
                    break

    def start_fires(self):
        self.turns += 1  # –°—á–µ—Ç—á–∏–∫ —Ö–æ–¥–æ–≤
        if self.turns % 5 == 0:
            while True:
                x = random.randint(0, self.width - 1)
                y = random.randint(0, self.height - 1)
                if self.board[y][x] == 'üå≤':
                    self.board[y][x] = 'üî•'  # –ù–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ –∑–∞–≥–æ—Ä–∞–µ—Ç—Å—è
                    self.burn_timers[(y, x)] = 0  # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç
                    break
        if random.random() < 0.25:
            while True:
                x = random.randint(0, self.width - 1)
                y = random.randint(0, self.height - 1)
                if self.board[y][x] == 'üü©':  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                    self.board[y][x] = 'üå≤'  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ
                    break        

    def draw(self):
        print(f"–í–µ—Ä—Ç–æ–ª–µ—Ç: –í–æ–¥–∞ - {self.helicopter.current_water}/{self.helicopter.water_capacity}, –ñ–∏–∑–Ω–∏ - {self.helicopter.lives}/{self.helicopter.max_lives}, –û—á–∫–∏ - {self.helicopter.points}")
        for y in range(self.height):
            for x in range(self.width):
                if x == self.helicopter.x and y == self.helicopter.y:
                    print('üöÅ', end=' ')
                else:
                    print(self.board[y][x], end=' ')
            print()

    def check_water_source(self):
        if self.board[self.helicopter.y][self.helicopter.x] == 'üåä':
            return True
        else:
            return False

    def check_clouds(self):
        if self.board[self.helicopter.y][self.helicopter.x] == '‚òÅÔ∏è':
            return True
        else:
            return False

    def check_shop(self):
        if self.board[self.helicopter.y][self.helicopter.x] == 'üõí':
            return True
        else:
            return False
        
    def check_hospital(self):
        if self.board[self.helicopter.y][self.helicopter.x] == 'üè•':
            return True
        else:
            return False
        
        
    def check_storm(self):
        if self.board[self.helicopter.y][self.helicopter.x] == '‚õàÔ∏è':
            return True
        else:
            return False
        
    def check_fire(self):
        if self.board[self.helicopter.y][self.helicopter.x] == '‚õàÔ∏è':
            return True
        else:
            return False   
    def generate_trees(self, num_trees):
        for _ in range(num_trees):
            x = random.randint(0, self.width - 1)
            y = random.randint(0, self.height - 1)
            self.board[y][x] = 'üå≤'

    def generate_rivers(self, num_rivers):
        for _ in range(num_rivers):
            x = random.randint(0, self.width - 1)
            y = random.randint(0, self.height - 1)
            self.board[y][x] = 'üåä'

    def generate_storm(self):
        for y in range(self.height):
            for x in range(self.width):
                if random.random() < 0.05:
                    self.board[y][x] = '‚õàÔ∏è'

    def generate_clouds(self):
        for y in range(self.height):
            for x in range(self.width):
                if random.random() < 0.1:
                    self.board[y][x] = '‚òÅÔ∏è'

    def generate_shop(self):
        x = random.randint(0, self.width - 1)
        y = random.randint(0, self.height - 1)
        self.board[y][x] = 'üõí'

    def generate_hospitals(self):
        x = random.randint(0, self.width - 1)
        y = random.randint(0, self.height - 1)
        self.board[y][x] = 'üè•'

    def check_fire(self):
        if self.board[self.helicopter.y][self.helicopter.x] == 'üî•':
            return True
        else:
            return False

    def check_burnt_trees(self):
        trees_to_remove = []
        for (y, x), burn_turns in self.burn_timers.items():
            self.burn_timers[(y, x)] += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≥–æ—Ä–µ–Ω–∏—è
            if burn_turns >= 10:
                self.board[y][x] = '‚¨ú'  # –î–µ—Ä–µ–≤–æ —Å–≥–æ—Ä–µ–ª–æ
                self.helicopter.points -= 10  # –®—Ç—Ä–∞—Ñ –∑–∞ —Å–≥–æ—Ä–µ–≤—à–µ–µ –¥–µ—Ä–µ–≤–æ
                trees_to_remove.append((y, x))
        for tree in trees_to_remove:
            del self.burn_timers[tree]  # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è

    def available_actions(self):
        if self.check_water_source():
            return " F - –ù–∞–±—Ä–∞—Ç—å –≤–æ–¥—É"
        elif self.check_shop():
            return " F - –ó–∞–ª–µ—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω"
        elif self.check_hospital():
            return " F - –ó–∞–ª–µ—Ç—å –≤ –±–æ–ª—å–Ω–∏—Ü—É"
        elif self.check_fire():
            return " F - –ü–æ—Ç—É—à–∏—Ç—å –ø–æ–∂–∞—Ä"
        else:
            return ""
def clear_screen():
    if os.name == 'nt':  # –ï—Å–ª–∏ –û–° Windows
        os.system('cls')
    else:  # –ï—Å–ª–∏ –¥—Ä—É–≥–∏–µ –û–° (Linux, MacOS, Unix)
        os.system('clear')
def save_game(game_map, filename="game_save.json"):
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    save_data = {
        "helicopter": {
            "x": game_map.helicopter.x,
            "y": game_map.helicopter.y,
            "water_capacity": game_map.helicopter.water_capacity,
            "current_water": game_map.helicopter.current_water,
            "lives": game_map.helicopter.lives,
            "points": game_map.helicopter.points,
        },
        "turns": game_map.turns,
        "fire_counter": game_map.fire_counter,
        "burn_timers": [
            {"y": k[0], "x": k[1], "burn_turns": v} for k, v in game_map.burn_timers.items()
        ],
        "board": [{"y": y, "x": x, "symbol": game_map.board[y][x]} for y in range(game_map.height) for x in range(game_map.width)],  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
    }

    # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª JSON
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(save_data, f, ensure_ascii=False, indent=4)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    
    print("–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
def load_game(filename="game_save.json"):
    if not os.path.exists(filename):
        print("–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None

    with open(filename, 'r', encoding='utf-8') as f:
        save_data = json.load(f)

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç—ã
    board_data = save_data["board"]
    map_width = max(item["x"] for item in board_data) + 1
    map_height = max(item["y"] for item in board_data) + 1

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã —Å –Ω—É–∂–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
    game_map = Map(map_width, map_height, 0, 0)

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ—Å–∫—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    game_map.board = [['üü©' for _ in range(map_width)] for _ in range(map_height)]
    for item in board_data:
        y = item["y"]
        x = item["x"]
        game_map.board[y][x] = item["symbol"]

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Ä—Ç–æ–ª–µ—Ç–µ
    helicopter_data = save_data["helicopter"]
    game_map.helicopter.x = helicopter_data["x"]
    game_map.helicopter.y = helicopter_data["y"]
    game_map.helicopter.water_capacity = helicopter_data["water_capacity"]
    game_map.helicopter.current_water = helicopter_data["current_water"]
    game_map.helicopter.lives = helicopter_data["lives"]
    game_map.helicopter.points = helicopter_data["points"]
    game_map.turns = save_data["turns"]
    game_map.fire_counter = save_data["fire_counter"]

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ä–µ–Ω–∏—è –¥–µ—Ä–µ–≤—å–µ–≤
    burn_timers = {}
    for item in save_data["burn_timers"]:
        y = item["y"]
        x = item["x"]
        burn_timers[(y, x)] = item["burn_turns"]

    game_map.burn_timers = burn_timers  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ä–µ–Ω–∏—è
    
    print("–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
    return game_map

def main():
    game_map = None
    
    while game_map is None:
        command = input("–ù–∞–∂–º–∏—Ç–µ 'r' –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã –∏–ª–∏ –ª—é–±—É—é –¥—Ä—É–≥—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã: ").lower()
        if command == 'r':
            game_map = load_game()  # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É
        else:
            # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
            width = int(input("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –∫–∞—Ä—Ç—ã: "))
            height = int(input("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É –∫–∞—Ä—Ç—ã: "))
            num_trees = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤: "))
            num_rivers = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫: "))
            game_map = Map(width, height, num_trees, num_rivers)
    
    game_running = True  # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∏–¥–µ—Ç –ª–∏ –∏–≥—Ä–∞

    while game_running:
        clear_screen()  # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–∞—Ä—Ç—ã
        game_map.draw()  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        if game_map.helicopter.lives <= 0:
            print("Game Over! –í–µ—Ä—Ç–æ–ª–µ—Ç –ø–æ—Ç–µ—Ä—è–ª –≤—Å–µ –∂–∏–∑–Ω–∏.")
            game_running = False  # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
            break

        prompt = game_map.available_actions()
        command = input(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (WASD –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è {prompt} –∏–ª–∏ 'q' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä—ã): ").lower()

        if command in ['w', 'a', 's', 'd']:
            game_map.helicopter.move(command)
            if game_map.check_clouds():
                game_map.helicopter.random_teleport()
                print("–í–µ—Ä—Ç–æ–ª–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω –∏–∑-–∑–∞ –æ–±–ª–∞–∫–æ–≤.")
            elif game_map.check_storm():
                game_map.helicopter.lose_life()  # –ü–æ—Ç–µ—Ä—è –∂–∏–∑–Ω–∏ –ø—Ä–∏ —à—Ç–æ—Ä–º–µ
            game_map.check_burnt_trees()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≥–æ—Ä–µ–≤—à–∏–µ –¥–µ—Ä–µ–≤—å—è
            game_map.start_fires()  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–∂–∞—Ä—ã
        
        elif command == 'f':
            if game_map.check_water_source():
                game_map.helicopter.fill_water()
            elif game_map.check_shop():
                game_map.shop.display_upgrades()
                upgrade_choice = input("–í–≤–µ–¥–∏—Ç–µ —É–ª—É—á—à–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: ").lower()
                game_map.helicopter.buy_upgrade(upgrade_choice, game_map.shop)
            elif game_map.check_hospital():
                game_map.helicopter.restore_lives()
            elif game_map.check_fire():
                game_map.helicopter.extinguish_fire(game_map)
        elif command == 'q':  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
            save_game(game_map)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        elif command == 'r':  # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã
            game_map = load_game()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        else:
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")

if __name__ == "__main__":
    main()           